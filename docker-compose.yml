services:
  proxy:
    image: caddy:2.9.0-beta.3-alpine
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    environment:
      HOST_ADDRESS: "${HOST_ADDRESS}"
    networks:
      - frontend
    volumes:
      - $PWD/caddy/Caddyfile:/etc/caddy/Caddyfile
      - $PWD/caddy/data:/data
      - $PWD/caddy/config:/config

  appserver:
    image: ilkkahanninen/partyboi:latest
    restart: unless-stopped
    ports:
      - "${PORT:-8123}:8123"
    environment:
      INSTANCE_NAME: "${INSTANCE_NAME}"
      HOST_ADDRESS: "${HOST_ADDRESS}"
      SESSION_SIGN_KEY: "${SESSION_SIGN_KEY}"
      ADMIN_USERNAME: "${ADMIN_USERNAME}"
      ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_USER: postgres
      DB_DATABASE: partyboi
      DB_HOST: db
      DB_PORT: "${DB_PORT}"
      FILES_ASSETS: /assets
      FILES_ENTRIES: /entries
      FILES_SCREENSHOTS: /screenshots
    volumes:
      - "${FILES_ASSETS}:/assets"
      - "${FILES_ENTRIES}:/entries"
      - "${FILES_SCREENSHOTS}:/screenshots"
    networks:
      - frontend
      - backend
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "-m", "5", "http://localhost:8123/health" ]
      interval: 10s
      timeout: 2s
      retries: 3

  db:
    image: postgres:18rc1
    restart: unless-stopped
    volumes:
      - "${DIR_DB}:/var/lib/postgresql/data"
    environment:
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_DB: "${DB_DATABASE}"
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s

  autoheal:
    image: docker:cli
    network_mode: none
    cap_drop:
      - ALL
    volumes: [ "/var/run/docker.sock:/var/run/docker.sock" ]
    command: [ "/bin/sh", "-c", "while true; do sleep 15; docker ps -q -f health=unhealthy | xargs --no-run-if-empty docker restart; done" ]
    restart: unless-stopped

networks:
  frontend:
    name: frontend
  backend:
    name: backend
